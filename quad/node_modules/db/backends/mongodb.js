const mongoose = require('mongoose')
const log = require('log')

const { Schema } = mongoose

const GuildSchema = new Schema({
    guildId: { type: String, required: true },
    alertsChannel: { type: String, required: false },
    chatLogsChannel: { type: String, required: false },
    prefix: { type: String, required: false }
})

const LocaleSchema = new Schema({
    discordId: { type: String, required: true },
    locale: { type: String, required: true },
})

class MongoBackend {
    #guilds;
    #locales;

    async init(prepareDatabase, options) {
        const connected = await this.tryConnect(options)
        if (!connected) return false

        if (prepareDatabase) {
            await this.setupModels()
        }
        
        return true
    }

    async tryConnect(options) {
        try {
            await mongoose.connect(`mongodb://${options.host}/${options.dbName}`)
            return true
        } catch(err) {
            log('Could not connect to MongoDB.')
            // TODO: log the exception
            return false
        }
    }

    async setupModels() {
        this.#guilds = mongoose.model('guilds', GuildSchema)
        this.#locales = mongoose.model('locales', LocaleSchema)
    }

    async findGuildLogs(guildId) {
        const g = await this.#guilds.findOne({ guildId })
        if (g) {
            return {
                alertsChannel: g.alertsChannel,
                chatLogsChannel: g.chatLogsChannel
            }
        } else {
            return {}
        }
    }

    async findGuildPrefix(guildId) {
        const g = await this.#guilds.findOne({ guildId })
        if (g) {
            return g.prefix
        } else {
            return null
        }
    }

    async getLocale(discordId) {
        const locale = await this.#locales.findOne({ discordId })
        if (locale) {
            return locale.locale
        } else {
            return null
        }
    }
}

let backend = new MongoBackend()
module.exports = backend