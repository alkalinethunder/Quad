const mongoose = require('mongoose')
const log = require('log')

const { Schema } = mongoose

const GuildSchema = new Schema({
    guildId: { type: String, required: true },
    alertsChannel: { type: String, required: false },
    chatLogsChannel: { type: String, required: false },
    prefix: { type: String, required: false }
})

const LocaleSchema = new Schema({
    discordId: { type: String, required: true },
    locale: { type: String, required: true },
})

const PinCategorySchema = new Schema({
    name: { type: String, required: true },
    author: { type: String, required: true },
})

const UserPinSchema = new Schema({
    author: { type: String, required: true },
    channel: { type: String, required: true },
    message: { type: String, required: true },
    date: { type: Date, required: true, default: new Date() },
    category: { type: Schema.Types.ObjectId, required: false, ref: 'pinCategories'}
})

class MongoBackend {
    #guilds;
    #locales;
    #pins;
    #pinCats;

    async init(prepareDatabase, options) {
        const connected = await this.tryConnect(options)
        if (!connected) return false

        if (prepareDatabase) {
            await this.setupModels()
        }
        
        return true
    }

    async tryConnect(options) {
        try {
            await mongoose.connect(`mongodb://${options.host}/${options.dbName}`)
            return true
        } catch(err) {
            log('Could not connect to MongoDB.')
            // TODO: log the exception
            return false
        }
    }

    async setupModels() {
        this.#guilds = mongoose.model('guilds', GuildSchema)
        this.#locales = mongoose.model('locales', LocaleSchema)
        this.#pinCats = mongoose.model('pinCategories', PinCategorySchema)
        this.#pins = mongoose.model('pins', UserPinSchema)
    }

    async findGuildLogs(guildId) {
        const g = await this.#guilds.findOne({ guildId })
        if (g) {
            return {
                alertsChannel: g.alertsChannel,
                chatLogsChannel: g.chatLogsChannel
            }
        } else {
            return {}
        }
    }

    async findGuildPrefix(guildId) {
        const g = await this.#guilds.findOne({ guildId })
        if (g) {
            return g.prefix
        } else {
            return null
        }
    }

    async getLocale(discordId) {
        const locale = await this.#locales.findOne({ discordId })
        if (locale) {
            return locale.locale
        } else {
            return null
        }
    }

    async insertPin(author, channel, message) {
        const existingPin = await this.#pins.findOne({ message, author, channel })
        if (existingPin) return false
        
        const pin = new this.#pins({
            message,
            author,
            channel
        })

        await pin.save()

        return true
    }

    async getPins(author, category, page, pageSize, sortAscending) {
        let pins = []
        if (!!category) {
            const cat = await this.#pinCats.findOne({ name: category, author })
            if (!cat) {
                return {
                    pageCount: 0,
                    pins: []
                }
            } else {
                pins = await this.#pins.find({
                    category: cat,
                }).populate('category')
            }
        } else {
            pins = await this.#pins.find({ 
                author
            }).populate('category')
        }

        const pageCount = Math.ceil(pins.length / pageSize)
        const offset = (page - 1) * pageSize
        const endOffset = Math.min(offset + pageSize, pins.length)

        pins.sort((a, b) => {
            if (sortAscending) {
                return b.date - a.date
            } else {
                return a.date - b.date
            }
        })

        const result = []

        for (let i = offset; i < endOffset; i++) {
            const pin = pins[i]
            result.push({
                message: pin.message,
                channel: pin.channel,
                author: pin.author,
                category: (!!pin.category) ? pin.category.name : null
            })
        }

        return {
            pageCount,
            pins: result
        }
    }

    async setLocale(user, locale) {
        let existingLocale = await this.#locales.findOne({ discordId: user })
        if (!existingLocale) {
            existingLocale = new this.#locales({
                discordId: user
            })
        }
        existingLocale.locale = locale
        await existingLocale.save()
        return true
    }
}

let backend = new MongoBackend()
module.exports = backend