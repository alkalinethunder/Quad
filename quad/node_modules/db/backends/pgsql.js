const pg = require('pg')

class PgBackend {
    #pool;
    
    async init(prepareDatabase, options) {
        this.#pool = new pg.Pool(options);
        this.#pool.on('error', (err, client) => {
            console.log(err);
        });

        if (prepareDatabase) {
            //Find the database scripts directory
            if (!fs.statSync("../databases/").isDirectory()) {
                log(t("Couldn't find the database scripts directory."), log.error);
                return false;
            }
            
            try {
                let client = await this.get();
                try {
                    let resp = await client.query("SELECT COUNT(*) FROM information_schema.tables WHERE table_name='databaseversion'");
                    if (resp.rows[0].count === '0' || process.argv.includes("--reinitdb")) {
                        log(t("Initialising the database."), log.info);
                        await client.query(await this.getDatabaseScript("init"));
                    } else {
                        resp = await client.query("SELECT version FROM databaseversion");
                        let currentDbVersion = resp.rows[0].version;
                        while (currentDbVersion < dbVersion) {
                            log(t("Upgrading database: version {{olddbversion}} -> {{newdbversion}}", {
                                olddbversion: currentDbVersion,
                                newdbversion: currentDbVersion + 1
                            }));
                            
                            currentDbVersion++;
                            await client.query(await this.getDatabaseScript(currentDbVersion));
                        };
                    }
                    
                    log(t("Database tables up to date (database version {{dbversion}}).", {
                        dbversion: dbVersion
                    }), log.success);
                    return true;
                } catch (err) {
                    log(t("FATAL: Couldn't prepare the database."), log.error);
                    log(t(err.stack), log.error);
                    return false;
                } finally {
                    client.release();
                }
            } catch (err) {
                //Something happened trying to acquire a client
                log(t("Couldn't connect to the PostgreSQL server.\nCheck that the PostgreSQL server is running and that your database settings are correct."), log.error);
                return false;
            }
        }
    }

    async get() {
        return await this.#pool.connect();
    }
    
    getPool() {
        return this.#pool;
    }
    
    getDatabaseScript(name) {
        return new Promise((res, rej) => {
            fs.readFile(`../databases/${name}.sql`, {
                encoding: 'utf8'
            }, (err, data) => {
                if (err) {
                    rej(err);
                } else {
                    res(data);
                }
            })
        });
    }
}

let backend = new PgBackend()
module.exports = backend